	contract Casino {
		enum Coin { HEADS, TAILS } ;
		enum State { IDLE, GAME_AVAILABLE,  BET_PLACED }
		State private state;
		address public operator, player;
		uint public pot;
		bytes32 public hashedNumber;
		uint public bet;
		Coin guess;

		function createGame(bytes32 hashNum)
		public byOperator, inState(IDLE) {
		hashedNumber = hashNum;
		state = GAME_AVAILABLE;
		}

		function placeBet(Coin _guess) public payable inState(GAME_AVAILABLE) {
		require (msg.sender != operator);
		require (msg.value <= pot);
		state = BET_PLACED;
		player = msg.sender;
		bet = msg.value;
		guess = _guess;
	}

 		function decideBet(uint secretNumber)
		public byOperator, inState(BET_PLACED) {
			require (hashedNumber == keccak256(secretNumber));
			Coin secret = (secretNumber % 2 == 0)? HEADS : TAILS;
			if (secret == guess) { pot = pot - bet;  player.transfer(bet*2);  bet = 0;}
			else {
			pot = pot + bet; bet = 0;
				}
		state = IDLE;}
		function addToPot() public payable byOperator { pot = pot + msg.value;}

		function removeFromPot(uint amount) public byOperator, noActiveBet { operator.transfer(amount);  pot = pot - amount;}
		}
